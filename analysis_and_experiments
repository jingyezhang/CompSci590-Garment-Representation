The code for MSE Loss. I purposely wrote in a text file, rather than push the changes directly to repository, but only for now. I will later upload the actual changes. The code is working except that the coming of the results is taking a little time. 
## MSE Loss part1 
import os
    
import cv2
import numpy as np
from sklearn.metrics import mean_squared_error

# For calculating the mean squared error between tactile images in testing_image_copy and the predictions within the val_output folder of results

# Replace 'your_username' with your actual Ubuntu username
base_path = "/home/annapurnapandita/CompSci590-Garment-Representation-4"
testing_images_path = os.path.join(base_path, "testing_images_copy")
results_path = "/home/annapurnapandita/results/resnet34.criterion=l1.lr=0.001.bs=16.wd=0.pretrained=False.time=2023-12-04@15-42"
val_output_path = os.path.join(results_path, "val_output")


# Function to load images from a folder
def load_images_from_folder(folder):
    images = []
    for filename in os.listdir(folder):
        img_path = os.path.join(folder, filename)
        img = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)
        if img is not None:
            images.append(img)
    return images


# Function to calculate mean squared error between two sets of images
def calculate_mse(images1, images2):
    mse_values = []
    for img1, img2 in zip(images1, images2):
        mse = mean_squared_error(img1.flatten(), img2.flatten())
        mse_values.append(mse)
    return np.mean(mse_values)


# Load tactile images from testing_images_copy
testing_images = []
for subfolder in os.listdir(testing_images_path):
    subfolder_path = os.path.join(testing_images_path, subfolder)
    tactile_image_path = os.path.join(subfolder_path, f"{subfolder}_t.png")
    tactile_img = cv2.imread(tactile_image_path, cv2.IMREAD_GRAYSCALE)
    testing_images.append(tactile_img)

# Load predicted images from val_output
predicted_images = load_images_from_folder(val_output_path)

# Calculate mean squared error
mse = calculate_mse(testing_images, predicted_images)

print(f"Mean Squared Error: {mse}")



##MSE Loss part2 

import os
import numpy as np
from PIL import Image
from skimage.metrics import mean_squared_error
import matplotlib.pyplot as plt


def find_closest_images(
    home_directory, training_folder_relative_path, testing_folder_relative_path
):
    # Construct the full paths
    training_folder_path = os.path.join(home_directory, training_folder_relative_path)
    testing_folder_path = os.path.join(home_directory, testing_folder_relative_path)

    # Get the list of subfolders in the training and testing folders
    training_subfolders = [
        f.path for f in os.scandir(training_folder_path) if f.is_dir()
    ]
    testing_subfolders = [f.path for f in os.scandir(testing_folder_path) if f.is_dir()]

    results = []  # Stores results in a list
    for training_subfolder in training_subfolders:
        # Extract the subfolder name (natural number) from the path
        training_folder_name = os.path.basename(training_subfolder)

        # Form the path to the target image in the training folder (e.g., 1000_v.png)
        target_image_path = os.path.join(
            training_subfolder, f"{training_folder_name}_v.png"
        )

        # Check if the target image exists in the training folder
        if os.path.exists(target_image_path):
            # Load the target image
            target_image = Image.open(target_image_path)

            # Initialize variables to keep track of the closest image and its MSE
            closest_image = None
            min_mse = float("inf")

            for testing_subfolder in testing_subfolders:
                # Extract the subfolder name from the path
                testing_folder_name = os.path.basename(testing_subfolder)

                # Form the path to the candidate image in the testing folder (e.g., 500_v.png)
                candidate_image_path = os.path.join(
                    testing_subfolder, f"{testing_folder_name}_v.png"
                )

                # Check if the candidate image exists in the testing folder
                if os.path.exists(candidate_image_path):
                    # Load the candidate image
                    candidate_image = Image.open(candidate_image_path)

                    # Calculate the mean squared error between target and candidate images
                    mse = mean_squared_error(
                        np.array(target_image), np.array(candidate_image)
                    )

                    # Update closest image if the current MSE is smaller
                    if mse < min_mse:
                        min_mse = mse
                        closest_image = candidate_image_path

            # Now, closest_image contains the path to the most similar image in the testing folder
            print(f"Closest image to {target_image_path} is: {closest_image}")

            # Calculate and print the MSE between tactile sparse images
            target_sparse_image_path = os.path.join(
                training_subfolder, f"{training_folder_name}_t_sparse.png"
            )
            closest_sparse_image_path = closest_image.replace("_v.png", "_t_sparse.png")

            target_sparse_image = Image.open(target_sparse_image_path)
            closest_sparse_image = Image.open(closest_sparse_image_path)

            mse_sparse = mean_squared_error(
                np.array(target_sparse_image), np.array(closest_sparse_image)
            )

            print(f"MSE between tactile sparse images: {mse_sparse}\n")

            # Store the results in a list
            results.append(
                {
                    "target_image_path": target_image_path,
                    "closest_image_path": closest_image,
                    "mse_sparse": mse_sparse,
                }
            )

            return results


# Set the relative paths to your training and testing folders
training_folder_relative_path = (
    "CompSci590-Garment-Representation-4/training_images_copy"
)
testing_folder_relative_path = "CompSci590-Garment-Representation-4/testing_images_copy"

# Call the function to find the closest image and calculate MSE for all subfolders
find_closest_images(
    os.path.expanduser("~"), training_folder_relative_path, testing_folder_relative_path
)


# Visualize the results
for result in results:
    print(f"Target Image: {result['target_image_path']}")
    print(f"Closest Image: {result['closest_image_path']}")
    print(f"MSE Sparse: {result['mse_sparse']}")
    print("\n")

# Optionally, you can create a more sophisticated visualization using matplotlib or other plotting libraries
# For example, a bar chart showing MSE values for each pair of images
target_images = [result["target_image_path"] for result in results]
mse_values = [result["mse_sparse"] for result in results]

plt.bar(target_images, mse_values)
plt.xlabel("Target Image")
plt.ylabel("MSE Sparse")
plt.title("MSE Sparse between Target and Closest Images")
plt.xticks(rotation=45, ha="right")
plt.show()






